import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
from datetime import datetime
plt.rcParams['figure.figsize']=(5,5)


data=pd.read_csv("https://raw.githubusercontent.com/cipherkrish/BookSalesPredict/master/BookDataset%20-%20Sheet2.csv",sep=',', parse_dates=[0])



 #PREPROCESSING 
 #NegativeValuesDrop
data = data.drop(data.index[data.Highschool <= 0],axis = 0) 
data = data.drop(data.index[data.Engineering <= 0],axis = 0)
data = data.drop(data.index[data.Medicine <= 0],axis = 0)
data = data.drop(data.index[data.Sportsmagazines <= 0],axis = 0)
data = data.drop(data.index[data.UPSC<= 0],axis = 0)
data = data.drop(data.index[data.Management <= 0],axis = 0)

#OutLiering
data = data.drop(data.index[data.Highschool > 500],axis = 0) 
data = data.drop(data.index[data.Engineering > 500],axis = 0)
data = data.drop(data.index[data.Medicine > 500],axis = 0)
data = data.drop(data.index[data.Sportsmagazines > 500],axis = 0)
data = data.drop(data.index[data.UPSC > 500],axis = 0)
data = data.drop(data.index[data.Management > 500],axis = 0)
df = pd.DataFrame(data)

df['month'] = pd.DatetimeIndex(df['DateofPurchase']).month
print(df.head(4))

#Grouping by month

df = data.groupby(['month']).mean()
df['month'] = df.index.tolist()

print(df)

df.plot.bar(x='month', y='Highschool',rot=0)
df.plot.bar(x='month', y='Engineering',rot=0)
df.plot.bar(x='month', y='Medicine',rot=0)
df.plot.bar(x='month', y='Sportsmagazines',rot=0)
df.plot.bar(x='month', y='UPSC',rot=0)
df.plot.bar(x='month', y='Management',rot=0)




r=data['month'].values
s=data['Result'].values

#print(r)
#print(s)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(r, s, test_size=0.3, random_state=0)

X_train=X_train.reshape(-1, 1)
y_train=y_train.reshape(-1, 1)
X_test=X_test.reshape(-1, 1)

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(random_state = 1)
classifier.fit(X_train,y_train)

from sklearn.linear_model import LogisticRegression
classifier1 = LogisticRegression(random_state = 0)

from sklearn.neighbors import KNeighborsClassifier
classifier2 = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)

from sklearn.ensemble import RandomForestClassifier
classifier3 = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)

classifier1.fit(X_train, y_train)
y_pred1 = classifier1.predict(X_test)

classifier2.fit(X_train, y_train)
y_pred2 = classifier2.predict(X_test)

classifier3.fit(X_train, y_train)
y_pred3 = classifier3.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_p)
# print(y_p)
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm:
  print(*line)


y=int(input())

if y<13:
  k = list(classifier.predict([[y]])[0].split(","))
  print(*k,sep="\n")
else:
  print("Enter a valid month")

